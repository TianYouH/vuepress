(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{377:function(_,v,l){"use strict";l.r(v);var i=l(42),t=Object(i.a)({},(function(){var _=this,v=_.$createElement,l=_._self._c||v;return l("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[l("h1",{attrs:{id:"设计原则"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#设计原则"}},[_._v("#")]),_._v(" 设计原则")]),_._v(" "),l("h2",{attrs:{id:"如何设计？"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#如何设计？"}},[_._v("#")]),_._v(" 如何设计？")]),_._v(" "),l("p",[_._v("描述")]),_._v(" "),l("ul",[l("li",[_._v("即按照哪一种思路或者标准来实现功能;")]),_._v(" "),l("li",[_._v("功能相同，可以有不同设计方案来实现;")]),_._v(" "),l("li",[_._v("伴随着需求增加，设计的作用才能体现出来;")])]),_._v(" "),l("p",[_._v("《UNIX/LINUX设计哲学》")]),_._v(" "),l("ul",[l("li",[l("p",[_._v("准则")]),_._v(" "),l("ol",[l("li",[_._v("小即时美;")]),_._v(" "),l("li",[_._v("让每个程序只做好一件事;")]),_._v(" "),l("li",[_._v("快速建立原型;")]),_._v(" "),l("li",[_._v("舍弃高效率而取可移植性;")]),_._v(" "),l("li",[_._v("采用纯文本来存储数据;")]),_._v(" "),l("li",[_._v("充分利用软件的杠杆效应（软件复用）;")]),_._v(" "),l("li",[_._v("使用shell脚本来提高杠杆效应和可移植性;")]),_._v(" "),l("li",[_._v("避免强制性的用户界面;")]),_._v(" "),l("li",[_._v("让每个程序都称为过滤器;")])])]),_._v(" "),l("li",[l("p",[_._v("小准则")]),_._v(" "),l("ul",[l("li",[_._v("允许用户定制环境;")]),_._v(" "),l("li",[_._v("尽量使操作系统内核小而轻量化;")]),_._v(" "),l("li",[_._v("使用小写字母并尽量简短;")]),_._v(" "),l("li",[_._v("沉默是金;")]),_._v(" "),l("li",[_._v("各部分之和大于整体;")]),_._v(" "),l("li",[_._v("寻求90%的解决方案;")])])])]),_._v(" "),l("h2",{attrs:{id:"solid五大设计原则"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#solid五大设计原则"}},[_._v("#")]),_._v(" SOLID五大设计原则")]),_._v(" "),l("ul",[l("li",[_._v("S-单一职责原则;\n"),l("ul",[l("li",[_._v("一个程序只做好一件事;")]),_._v(" "),l("li",[_._v("如果功能过于复杂就拆分开，每个部分保持独立;")])])]),_._v(" "),l("li",[_._v("O-开放封闭原则;\n"),l("ul",[l("li",[_._v("对扩展开放，对修改封闭;")]),_._v(" "),l("li",[_._v("增加需求时，扩展新代码，而非修改已有代码;")]),_._v(" "),l("li",[_._v("这是软件设计的终极目标;")])])]),_._v(" "),l("li",[_._v("L-李氏置换原则;\n"),l("ul",[l("li",[_._v("子类能覆盖父类;")]),_._v(" "),l("li",[_._v("父类能出现的地方子类就能出现;")]),_._v(" "),l("li",[_._v("S中使用较少（弱类型&继承使用较少);")])])]),_._v(" "),l("li",[_._v("I-接口独立原则;\n"),l("ul",[l("li",[_._v("保持接口的单一独立，避免出现“胖接口”;")]),_._v(" "),l("li",[_._v("JS中是没有接口（typescript除外），使用较少;")]),_._v(" "),l("li",[_._v("类似于单一职责原则，这里更关注接口;")])])]),_._v(" "),l("li",[_._v("D–依赖导致原则;\n"),l("ul",[l("li",[_._v("面向接口编程，依赖于抽象而不依赖于具体;")]),_._v(" "),l("li",[_._v("使用方只关注接口而不关注具体类的实现;")]),_._v(" "),l("li",[_._v("JS中使用较少(没有接口&弱类型);")])])])]),_._v(" "),l("h2",{attrs:{id:"从设计到模式"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#从设计到模式"}},[_._v("#")]),_._v(" 从设计到模式")]),_._v(" "),l("ul",[l("li",[_._v("设计;")]),_._v(" "),l("li",[_._v("模式;")]),_._v(" "),l("li",[_._v("分开;")])]),_._v(" "),l("h2",{attrs:{id:"_23种设计模式"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_23种设计模式"}},[_._v("#")]),_._v(" 23种设计模式")]),_._v(" "),l("ul",[l("li",[_._v("创建型;\n"),l("ul",[l("li",[_._v("工厂模式(工厂方法模式，抽象工厂模式，建造者模式);")]),_._v(" "),l("li",[_._v("单例模式;")]),_._v(" "),l("li",[_._v("原型模式;")])])]),_._v(" "),l("li",[_._v("结构型（组合型）;\n"),l("ul",[l("li",[_._v("适配器模式;")]),_._v(" "),l("li",[_._v("装饰器模式;")]),_._v(" "),l("li",[_._v("代理模式;")]),_._v(" "),l("li",[_._v("外观模式;")]),_._v(" "),l("li",[_._v("桥接模式;")]),_._v(" "),l("li",[_._v("组合模式;")]),_._v(" "),l("li",[_._v("享元模式;")])])]),_._v(" "),l("li",[_._v("行为型;\n"),l("ul",[l("li",[_._v("策略模式;")]),_._v(" "),l("li",[_._v("模板方法模式;")]),_._v(" "),l("li",[_._v("观察者模式;")]),_._v(" "),l("li",[_._v("迭代器模式;")]),_._v(" "),l("li",[_._v("职责连模式;")]),_._v(" "),l("li",[_._v("命令模式;")]),_._v(" "),l("li",[_._v("备忘录模式;")]),_._v(" "),l("li",[_._v("状态模式;")]),_._v(" "),l("li",[_._v("访问者模式;")]),_._v(" "),l("li",[_._v("中介者模式;")]),_._v(" "),l("li",[_._v("解释器模式;")])])])])])}),[],!1,null,null,null);v.default=t.exports}}]);